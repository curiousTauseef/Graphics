#include "Utils.hpp"

public Utils::convert(const char *image_in, const char *image_out, Type t) {
    unsigned char *img_in = loadPNM(image_in, width, height, numComponents);
    float *img_out = new float [width*height*numComponents];
    
    for ( uint i = 0 ; i < height ; ++i ) // height
    {
		for ( uint j = 0 ; j < width ; ++j ) // width
		{
		    for ( uint k = 0 ; k < numComponents ; ++k ) // color channels - 3 for RGB images
		    {
			uint index = i*width*numComponents + j*numComponents + k; //index within the image
			
			//typecast 0 - 255 values to the 0.0f -> 1.0f range 
			img_out[index] = static_cast<float>(img_in[index])/255.0f; //R
			img_out[index + 1] = static_cast<float>(img_in[index + 1])/255.0f;//G
			img_out[index + 2] = static_cast<float>(img_in[index + 2])/255.0f;//B
			
		    }
		    
		}
    }
    

	WritePFM(image_out, width, height, numComponents, img_out);
    switch (t) {

    }
}